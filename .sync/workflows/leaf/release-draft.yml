# This workflow automatically drafts new project releases so it is obvious
# what a current release will look like at any time.
#
# It takes advantage of the labels used in Project Mu to automatically categorize
# the types of changes in a given release. In addition, the semantic version of
# the code is constantly maintained based on Project Mu label conventions to ensure
# semantic versioning is followed and a release version is always ready.
#
# NOTE: This file is automatically synchronized from Mu DevOps. Update the original file there
#       instead of the file in this repo.
#
# - Mu DevOps Repo: https://github.com/microsoft/mu_devops
# - File Sync Settings: https://github.com/microsoft/mu_devops/blob/main/.sync/Files.yml
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
#
# For more information, see:
# https://github.com/release-drafter/release-drafter

{% import '../../Version.njk' as sync_version -%}

name: Update Release Draft

on:
  push:
    branches:
      - {{ trigger_branch_name if trigger_branch_name else sync_version.latest_mu_release_branch | replace ("release", "dev") }}

jobs:
  draft:

    permissions:
      contents: write
      pull-requests: write

    uses: makubacki/mu_devops/.github/workflows/ReleaseDrafter.yml@{{ sync_version.mu_devops }}
    secrets: inherit

    steps:
      - name: Get Draft Release Details
        id: get-latest-release
        if: {{ true if not trigger_branch_name else false }}
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const latestDraftRelease = releases.data.find(release => release.target_commitish === process.env.SOURCE_BRANCH && release.draft);
            if (!latestDraftRelease) {
              throw new Error(`No draft release found for branch ${process.env.SOURCE_BRANCH}`);
            }
            console.log(`Latest Release Draft Found: ${latestDraftRelease.name} (${latestDraftRelease.tag_name})\n`);
            return latestDraftRelease;

      # - name: Draft Release for Release Branch
      #   uses: actions/github-script@v7
      #   if: {{ true if not trigger_branch_name else false }}
      #   with:
      #     script: |
      #       const latestDraftRelease = ${getLatestRelease.outputs.result};
      #       const newTag = `release-${latestDraftRelease.tag_name}`;
      #       await github.repos.createRelease({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         tag_name: newTag,
      #         target_commitish: process.env.TARGET_BRANCH,
      #         name: latestDraftRelease.name,
      #         body: latestDraftRelease.body,
      #         draft: true,
      #         prerelease: latestDraftRelease.prerelease
      #       });
