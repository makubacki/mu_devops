## @file
# Mu DevOps template file to build and publish Nuget packages.
#
# Specify the NuGet feed API key as a secret pipeline variable named
# "NUGET_KEY" if an API key is used.
#
# Copyright (c) Microsoft Corporation. All rights reserved.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: artifacts_identifier
  displayName: Artifacts Identifier
  type: string
  default: 'Artifacts'
- name: custom_nuget_prep_step_list
  displayName: Custom NuGet Package Step List
  type: stepList
  default:
    - script: echo No custom NuGet prep steps provided
- name: include_binaries
  displayName: Include build binaries in the Nuget package
  type: boolean
  default: true
- name: include_logs
  displayName: Include build logs in the Nuget package
  type: boolean
  default: false
- name: include_other
  displayName: Include other build artifacts in the Nuget package
  type: boolean
  default: false
- name: license_file_path
  displayName: License File Path (Absolute Path)
  type: string
  default: ''

#
# Nuget Package Configuration Data
#

# The package config file path is relative to the source code workspace root directory.
- name: nuget_package_config_file_path
  displayName: Nuget Package Config File Path
  type: string
  default: ''

# The package version should always be specified and accurate.
- name: nuget_package_version
  displayName: Nuget Package Version
  type: string
  default: ''

steps:
  - bash: |
      if [ -z "${{ parameters.license_file_path }}" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"license_file_path\""
        echo "##vso[task.complete result=Failed;]"
      fi
      if ![ -f "${{ parameters.license_file_path }}" ]; then
        echo "##vso[task.logissue type=error;]license_file_path does not exist: \"${{ parameters.license_file_path }}\""
        echo "##vso[task.complete result=Failed;]"
      fi
    displayName: Validate License File Path

  - bash: |
     ARTIFACTS_IDENTIFIER_PATH=$(echo "${{ parameters.artifacts_identifier }}" | tr " " "_")
     echo "##vso[task.setvariable variable=artifacts_identifier_path]$ARTIFACTS_IDENTIFIER_PATH"

  #
  # Binary Artifact Download
  #
  # The default steps download the binary build artifacts for the current build
  # (as opposed to a "tagged" build or other lookup mechanism for locating specific artifacts)
  - task: DownloadBuildArtifacts@0
    name: DownloadBinaryBuildArtifacts
    displayName: Download Binary Artifacts
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Binaries ${{ parameters.artifacts_identifier }}'
      downloadPath: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)'
    condition: eq('${{ parameters.include_binaries }}', 'true')

  - task: CopyFiles@2
    displayName: "Copy Binaries to Staged Nuget Package"
    inputs:
      SourceFolder: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)/Binaries ${{ parameters.artifacts_identifier }}'
      targetFolder: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)/package_contents/binaries'
      contents: '**'
      flattenFolders: true
    condition: and(succeeded(), eq('${{ parameters.include_binaries }}', 'true'))

  #
  # Log Artifact Download
  #
  # The default steps download the log build artifacts for the current build
  # (as opposed to a "tagged" build or other lookup mechanism for locating specific artifacts)
  - task: DownloadBuildArtifacts@0
    name: DownloadLogBuildArtifacts
    displayName: Download Log Artifacts
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Logs ${{ parameters.artifacts_identifier }}'
      downloadPath: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)'
    condition: eq('${{ parameters.include_logs }}', 'true')

  - task: CopyFiles@2
    displayName: "Copy Logs to Staged Nuget Package"
    inputs:
      SourceFolder: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)/Logs ${{ parameters.artifacts_identifier }}'
      targetFolder: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)/package_contents/logs'
      contents: '**'
      flattenFolders: true
    condition: and(succeeded(), eq('${{ parameters.include_logs }}', 'true'))

  #
  # Other Artifact Download
  #
  # The default steps download the other build artifacts for the current build
  # (as opposed to a "tagged" build or other lookup mechanism for locating specific artifacts)
  - task: DownloadBuildArtifacts@0
    name: DownloadOtherBuildArtifacts
    displayName: Download Other Artifacts
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Other ${{ parameters.artifacts_identifier }}'
      downloadPath: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)'
    condition: eq('${{ parameters.include_other }}', 'true')

  - task: CopyFiles@2
    displayName: "Copy Binaries to Staged Nuget Package"
    inputs:
      SourceFolder: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)/Other ${{ parameters.artifacts_identifier }}'
      targetFolder: '$(Build.StagingDirectory)/Nuget/$(artifacts_identifier_path)/package_contents/other'
      contents: '**'
      flattenFolders: true
    condition: and(succeeded(), eq('${{ parameters.include_other }}', 'true'))

  # This step provides an opportunity for custom preparation steps to run before publishing
  - ${{ parameters.custom_nuget_prep_step_list }}

  - task: NuGetAuthenticate@0
    displayName: Authenticate Local Feed

  - task: Bash@3
    name: PackAndPublishNugetPackage
    displayName: Pack and Push Nuget Package (${{ parameters.artifacts_identifier }})
    env:
      LICENSE_FILE_PATH: ${{ parameters.license_file_path }}
      NUGET_KEY: $(NUGET_KEY)
      NUGET_PACKAGE_CONFIG_FILE_PATH: ${{ parameters.nuget_package_config_file_path }}
      NUGET_PACKAGE_VERSION: ${{ parameters.nuget_package_version }}
    inputs:
      targetType: 'inline'
      script: |
        apiKey=$NUGET_KEY
        configFilePath=$NUGET_PACKAGE_CONFIG_FILE_PATH
        customLicensePath=$LICENSE_FILE_PATH
        inputFolderPath="${BUILD_STAGINGDIRECTORY}/Nuget/${ARTIFACTS_IDENTIFIER_PATH}/package_contents"
        outputLogPath="${BUILD_STAGINGDIRECTORY}/Nuget/NugetPackagingLog.txt"
        packageVersion=$NUGET_PACKAGE_VERSION
        nuget-publish --Operation PackAndPush --OutputLog "$outputLogPath" --ConfigFilePath "$configFilePath" --InputFolderPath "$inputFolderPath" --Version "$packageVersion" --ApiKey "$apiKey" --CustomLicensePath "$customLicensePath"
